import streamlit as st 
import pandas as pd 
from sklearn.metrics import accuracy_score 
from sklearn.ensemble import RandomForestClassifier 
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 
import seaborn as sns
import matplotlib.pyplot as plt
import random

df = pd.read_csv('wine_5.csv')
st.title('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∏–Ω–∞')

st.write("""
    
    –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å, –ø–æ–∑–≤–æ–ª—è—é—â—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∏–Ω–∞ (—Ö–æ—Ä–æ—à–µ–µ –∏–ª–∏ –ø–ª–æ—Ö–æ–µ).
    """)

st.markdown("""
            –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∞—Ç–∞—Å–µ—Ç –ø–æ –æ—Ü–µ–Ω–∫–∞–º –∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∏–Ω–∞ –∏ –µ–≥–æ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è Vinho verde.
             –í –¥–∞–Ω–Ω—ã—Ö 11 —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –æ—Ü–µ–Ω–∫–∞.
            """)
st.write(df.head())

st.markdown("""
    ### –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π
    
       
    """)

st.markdown("- Fixed acidity - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å", help="–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤–∫—É—Å–∞ –≤–∏–Ω–∞, –ø—Ä–∏–≤–Ω–æ—Å–∏—Ç —Å–≤–µ–∂–µ—Å—Ç—å –≤–∫—É—Å—É")
st.markdown("- Volatile acidity - –ª–µ—Ç—É—á–∞—è –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å", help="–û–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –Ω–∞–ª–∏—á–∏–µ–º –ª–µ—Ç—É—á–∏—Ö –∫–∏—Å–ª–æ—Ç –≤ –≤–∏–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫–∏—Ö –∫–∞–∫ —É–∫—Å—É—Å–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞")
st.markdown("- Citric acid - –ª–∏–º–æ–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞", help="–ü—Ä–∏–¥–∞–µ—Ç –≤–∏–Ω—É –±–æ–ª–µ–µ —è—Ä–∫—É—é –∏ —Å–≤–µ–∂—É—é –Ω–æ—Ç–∫—É, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –æ—Å–≤–µ–∂–∞—é—â–∏–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –Ω–∞ –≤–∫—É—Å. –û–Ω–∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ä–æ—Ç—å—Å—è —Å –∏–∑–ª–∏—à–Ω–µ–π —Å–ª–∞–¥–æ—Å—Ç—å—é, –¥–æ–±–∞–≤–ª—è—è –Ω–æ—Ç–∫—É –∫–∏—Å–ª–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –≤–∫—É—Å –Ω–∞–ø–∏—Ç–∫–∞. –í–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∏–Ω–∞, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–º —Å–≤–µ–∂–µ—Å—Ç—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
st.markdown("- Residual sugar - –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–∞—Ö–∞—Ä", help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—Ö–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –ø—Ä–µ–≤—Ä–∞—â–µ–Ω –≤ —Å–ø–∏—Ä—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤–∏–Ω–∞. –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–∞–¥–æ—Å—Ç–∏ –≤–∫—É—Å–∞ –≤–∏–Ω–∞")
st.markdown("- Chlorides - —Ö–ª–æ—Ä–∏–¥—ã", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ª–∏, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –≤ –≤–∏–Ω–µ")
st.markdown("- Free sulfur dioxide - —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã", help="–û–Ω–∏ –∂–µ —Å—É–ª—å—Ñ–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –≤–∏–Ω–æ–¥–µ–ª–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–∞. –°—É–ª—å—Ñ–∏—Ç—ã –Ω–µ –¥–∞—é—Ç –≤–∏–Ω—É —Å–∫–∏—Å–∞—Ç—å –∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤–æ–∏ –≤–∫—É—Å–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤–∏–Ω–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –≤–∏–¥–µ (–≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–º) –∏—Å–≤—è–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ (—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å —Å –≤–æ–¥–æ–π)")
st.markdown("- Total sulfur dioxide - —Å—É–º–º–∞—Ä–Ω—ã–π –¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã", help="–û–Ω–∏ –∂–µ —Å—É–ª—å—Ñ–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –≤–∏–Ω–æ–¥–µ–ª–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–∞. –°—É–ª—å—Ñ–∏—Ç—ã –Ω–µ –¥–∞—é—Ç –≤–∏–Ω—É —Å–∫–∏—Å–∞—Ç—å –∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤–æ–∏ –≤–∫—É—Å–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤–∏–Ω–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –≤–∏–¥–µ (–≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–º) –∏—Å–≤—è–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ (—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å —Å –≤–æ–¥–æ–π)")
st.markdown("- Density - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å", help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–∞—Å—Å—ã (–≥—Ä–∞–º–º—ã) —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ 1 –º–∏–ª–ª–∏–ª–∏—Ç—Ä–µ –≤–∏–Ω–∞. –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–∏–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞—Ö–∞—Ä–∞, –∞–ª–∫–æ–≥–æ–ª—è –∏ –∫–∏—Å–ª–æ—Ç—ã –≤ —Å–æ—Å—Ç–∞–≤–µ –Ω–∞–ø–∏—Ç–∫–∞.")
st.markdown("- pH", help="–í—ã—Å—Ç—É–ø–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π —Ü–≤–µ—Ç–∞ –≤–∏–Ω–∞. –í–∏–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º pH —Ç–µ–º–Ω–µ–µ –∏ –∏–º–µ—é—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ —Ü–≤–µ—Ç–∞. –í–∏–Ω–∞ —Å –Ω–∏–∑–∫–∏–º pH —Å–≤–µ—Ç–ª–µ–µ –∏ –∏–º–µ—é—Ç —è—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π –∏ —è—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ —Ü–≤–µ—Ç–∞")
st.markdown("- Sulphates - —Å—É–ª—å—Ñ–∞—Ç—ã", help="–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –æ–∫–∏—Å–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –°–µ—Ä–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –≤–∏–Ω–æ, –ø–æ–º–æ–≥–∞—é—Ç –∑–∞—â–∏—Ç–∏—Ç—å –µ–≥–æ –æ—Ç –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –∫–∏—Å–ª–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫—É —Å–≤–µ–∂–µ—Å—Ç–∏, –æ–∫–∏—Å–ª–µ–Ω–∏—é –∏ –ø–æ—Ä—á–µ –≤–∫—É—Å–æ–≤—ã—Ö –∫–∞—á–µ—Å—Ç–≤")
st.markdown("- Alcohol - —Å–ø–∏—Ä—Ç", help="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –∫—Ä–µ–ø–æ—Å—Ç—å –≤–∏–Ω–∞")

x = df.drop(['quality'], axis=1)  # axis=1 - —Å—Ç–æ–ª–±–µ—Ü
y = df.iloc[:, -1]  # –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=0, shuffle=True)

def userreport():
    number_input = st.sidebar.number_input('–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å', value=None, placeholder="Type a number...")
    number = st.sidebar.slider("", 4.6, 15.9, value=number_input)
    
    acid = st.sidebar.number_input('–õ–µ—Ç—É—á–∞—è –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å', value=None, placeholder="Type a number...")
    number_2 = st.sidebar.slider("", 0.12, 1.58, value=acid)
    
    citric_acid_2 = st.sidebar.number_input('–õ–∏–º–æ–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞', value=None, placeholder="Type a number...")
    citric_acid	= st.sidebar.slider("", 0.0, 1.0, value=citric_acid_2)
    
    residual_sugar_2 = st.sidebar.number_input('–û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–∞—Ö–∞—Ä', value=None, placeholder="Type a number...")
    residual_sugar = st.sidebar.slider("", 0.9, 15.5, value=residual_sugar_2)

    chlorides_2 = st.sidebar.number_input('–•–ª–æ—Ä–∏–¥—ã', value=None, placeholder="Type a number...")    
    chlorides = st.sidebar.slider("", 0.012, 0.611, value=chlorides_2)

    free_sulfur_dioxide_2 = st.sidebar.number_input('–°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã', value=None, placeholder="Type a number...")
    free_sulfur_dioxide = st.sidebar.slider("", 1.0, 72.0, value=free_sulfur_dioxide_2)

    total_sulfur_dioxide_2 = st.sidebar.number_input('C—É–º–º–∞—Ä–Ω—ã–π –¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã', value=None, placeholder="Type a number...")
    total_sulfur_dioxide = st.sidebar.slider("", 6.0, 289.0, value=total_sulfur_dioxide_2)

    density_2 = st.sidebar.number_input('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', value=None, placeholder="Type a number...")
    density = st.sidebar.slider("", 0.990, 1.004, value=density_2)

    pH_2 = st.sidebar.number_input('pH', value=None, placeholder="Type a number...")
    pH	= st.sidebar.slider("", 2.74, 4.01, value=pH_2)

    sulphates_2 = st.sidebar.number_input('–°—É–ª—å—Ñ–∞—Ç—ã', value=None, placeholder="Type a number...")
    sulphates = st.sidebar.slider("", 0.33, 2.0, value=sulphates_2)

    alcohol_2 = st.sidebar.number_input('–°–ø–∏—Ä—Ç', value=None, placeholder="Type a number...")
    alcohol = st.sidebar.slider("", 8.4, 14.9, value=alcohol_2)

    # —Å–±–æ—Ä –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä—å
    report = {
        'fixed acidity' : number,
        'volatile acidity' : number_2,
        'citric acid' : citric_acid,
        'residual sugar' : residual_sugar,
        'chlorides' : chlorides,
        'free sulfur dioxide' : free_sulfur_dioxide,
        'total sulfur dioxide' : total_sulfur_dioxide,
        'density' : density,
        'pH' : pH,
        'sulphates' : sulphates,
        'alcohol' : alcohol}  


    report = pd.DataFrame(report, index=[0])  # DataFrame –±—É–¥–µ—Ç –∏–º–µ—Ç—å 1 —Å—Ç—Ä–æ–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º 0
    return report    


userdata = userreport()

rf = RandomForestClassifier()
rf.fit(xtrain, ytrain)

st.subheader('–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏: ')
# —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏
st.write(str(accuracy_score(ytest, rf.predict(xtest)) * 100) + '%')

userresult = rf.predict(userdata)  # –ø–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.subheader('–¢–∏–ø –≤–∏–Ω–∞: ')
if userresult[0] == 0:
    output = '–ü–ª–æ—Ö–æ–µ'
else:
    output = '–•–æ—Ä–æ—à–µ–µ'


st.write(output)

if userresult[0] == 0:
    #smiley = ('üòî')
    st.image('./sad cat.png', width=300)
else:
    st.image('./good cat.png', width=300)
    #smiley = ('üòçü•Ç')


my_list = ["Antinori Tignanello Toscana IGT 2019 - –∫—Ä–∞—Å–Ω–æ–µ, —Å—É—Ö–æ–µ","Marques de Caceres Crianza 2017 - –∫—Ä–∞—Å–Ω–æ–µ, —Å—É—Ö–æ–µ", 
           "Alamos Malbec 2021 - –∫—Ä–∞—Å–Ω–æ–µ, —Å—É—Ö–æ–µ", "770 Miles Zinfandel - –∫—Ä–∞—Å–Ω–æ–µ, —Å—É—Ö–æ–µ", "Felix Solis Mucho Mas - –∫—Ä–∞—Å–Ω–æ–µ, —Å—É—Ö–æ–µ",
           "Duca di Saragnano Alchymia Primitivo - –∫—Ä–∞—Å–Ω–æ–µ, –ø–æ–ª—É—Å—É—Ö–æ–µ"]

if userresult[0] == 1:
    st.subheader('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –í–∞—Å: ')
    for item in my_list:
        st.write(item)

st.subheader('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è')

#st.bar_chart(df.drop(['quality'], axis=1), title="–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞")
#st.caption("–≠—Ç–æ –ø–æ–¥–ø–∏—Å—å –∫ –≥—Ä–∞—Ñ–∏–∫—É")

df_1 = df.drop(['quality'], axis=1)

st.bar_chart(df_1)

fig, ax = plt.subplots(figsize=(12, 8))
sns.heatmap(df_1.corr(), annot=True, fmt=".2f", ax=ax)
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ü–∏—Ä—Å–æ–Ω–∞\n', fontsize=20)
st.write(fig)